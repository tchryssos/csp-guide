import React from 'react'

import PageWrapper from 'components/PageWrapper'
import ChangePages from 'components/ChangePage/ChangePages'
import ContentBlock from 'components/ContentBlock'
import Quote from 'components/Quote'

import './Nonces.scss'

const generateNonce = () => {
	// Don't use this to make a real nonce
	const nonce = btoa(window.crypto.getRandomValues(new Uint32Array(1))[0])
	const nonceTarget = document.querySelector('.nonceTarget')
	if (nonceTarget.firstChild) {
		nonceTarget.removeChild(nonceTarget.firstChild)
	}
	const nonceDiv = document.createElement('div')
	nonceDiv.innerText = nonce
	nonceTarget.appendChild(nonceDiv)
}

const nodeString = (
	// The following code is formatted very strangely for display purposes
	// eslint-disable-next-line
`app.get('/*', (req, res, next) => {
  // Set nonce
  const nonce = crypto.randomBytes(16).toString('base64')
  res.setHeader(
    'Content-Security-Policy',
    \`script-src 'nonce-\${nonce}' 'strict-dynamic' https:\`
  )
})`
)

const fastlyString = (
	// The following code is formatted very strangely for display purposes
	// eslint-disable-next-line
`declare local var.nonce STRING;
set var.nonce = randomstr(16, "abcdefghijklmnopqr...");
set resp.http.Content-Security-Policy = "script-src 'nonce-" var.nonce "'";`
)

const templatingString = (
	'<script nonce="<%= nonce %>" type="module" src="/main.js"></script>'
)

const templateServerString = (
	// The following code is formatted very strangely for display purposes
	// eslint-disable-next-line
`let nonce

const setCSP = (req, res, next) => {
  nonce = crypto.randomBytes(16).toString('base64');
  res.setHeader(
    'Content-Security-Policy',
    \`script-src 'nonce-\${nonce}'\`
  )
  next()
}

...

app.use(setCSP)

...

app.get('/', (req, res) => {
  res.render('pages/index', {
    nonce,
  });
});`
)

const Nonces = () => (
	<PageWrapper>
		<ContentBlock title="What's a nonce?">
			<p><a href="https://en.wikipedia.org/wiki/Cryptographic_nonce">Wikipedia</a> defines a (cryptographic) nonce as:</p>
			<Quote>
				<p>... an arbitrary number used only once in a cryptographic communication… To ensure that a nonce is used only once, it should be time-variant (including a suitably fine-grained timestamp in its value), or generated with enough random bits to ensure a probabilistically insignificant chance of repeating a previously generated value.</p>
			</Quote>
			<div className="nonceButtonWrapper">
				<button className="nonceButton" onClick={generateNonce}>Generate Nonce</button>
				<div className="nonceTarget" />
			</div>
		</ContentBlock>
		<ContentBlock title="Using nonces with CSP">
			<p>Google’s recommendation is to use nonces with the script-src directive, which they identified as the “primary reason for the insecurity of policies.” This is fairly straightforward to implement on the header side:</p>
			<code>
				Content-Security-Policy: script-src ‘nonce-&#123;nonce&#125;’.
			</code>
			<p>The nonce itself should be generated server-side, but can also be generated by a CDN that allows for custom headers. Please note that the below examples might not be crypographically sound; always do your own research.</p>
			<p>Node.js example</p>
			<code className="formattedCode">
				<pre>{nodeString}</pre>
			</code>
			<p>The above principle should hold true for any server-side code: on each request, generate a new nonce and pass that to your header.</p>
			<p>CDN example (Fastly VCL)</p>
			<code className="formattedCode">
				<pre>{fastlyString}</pre>
			</code>
			<p>If you&#39;re using Cloudfront, see <a href="https://aws.amazon.com/blogs/networking-and-content-delivery/adding-http-security-headers-using-lambdaedge-and-amazon-cloudfront/">this link</a> for instructions.</p>
			<p>Now, if we try to execute a script that doesn&#39;t include a nonce attribute matching the nonce in the header, we&#39;ll see an error message.</p>
			<code>
				Refused to execute inline event handler because it violates the following Content Security Policy directive: &#34;script-src &#39;nonce-&#123;your_nonce&#125;&#39;&#34;. Either the &#39;unsafe-inline&#39; keyword, a hash (&#39;sha256-...&#39;), or a nonce (&#39;nonce-...&#39;) is required to enable inline execution.
			</code>
			<p>Applying the nonce to each script tag in your code is more challenging, and the implementation depends on the framework of your project.</p>
			<p>The simplest solution is to use a templating engine (<a href="https://ejs.co/">EJS</a>, <a href="https://handlebarsjs.com/">Handlebars</a>, <a href="http://jade-lang.com/">Jade</a>, etc), which allows you to to do something like:</p>
			<code>
				{templatingString}
			</code>
			<p>Now, when serving the page, you can pass a variable &#39;nonce&#39; that will be interpolated into your interpolation expression, and all of your script tags including that expression will have the nonce passed to them. The below example is simple, but should get the concept across.</p>
			<code className="formattedCode">
				<pre>{templateServerString}</pre>
			</code>
		</ContentBlock>
		<ChangePages prevPageUrl="/how-does-csp-work" nextPageUrl="/" />
	</PageWrapper>
)

export default Nonces
